@using TaskControl.ViewDataPreparers
@using TaskControlDTOs
@model TaskControl.Models.TaskViewModel

@{
  ViewBag.Title = "Preview";
  var getActivityOnTaskUrl = Url.Action("GetActivityOnTask", "Task");
  var taskId = Model.Id;
  var statusesList = new HtmlString(ViewBag.Statuses);
  string urlNewProjectComment = Url.Action("AddNewComment", "Task");
}



<div class="container">
  <div class="well">
    <div class="media">
      <div id="exTab3" class="container">
        <ul class="nav nav-pills">
          <li class="active">
            <a href="#Overview" data-toggle="tab">@Resources.Resources.Overview_Tab</a>
          </li>
          <li>
            <a href="#activity" data-toggle="tab"  id="activityTab">@Resources.Resources.Activity_Tab</a>
          </li>
          <li>
            <a href="#commentsTab" data-toggle="tab">@Resources.Resources.Comments_Tab</a>
          </li>
        </ul>

        <div class="tab-content clearfix">
          <div class="tab-pane active" id="Overview">
           
            <br/>
            <i class="glyphicon glyphicon-calendar"></i><label>@Resources.Resources.DueDate_Label :</label><span> @Html.DisplayFor(model => model.DueDate)</span>
            <br />
            <span class="glyphicon glyphicon-user"><label>@Resources.Resources.Assignee_Label :</label>@Html.DisplayFor(model => model.Asignee)</span>
            <br />
            <span class="glyphicon glyphicon-tag"></span><label>@Resources.Resources.IssueType_Label :</label> <span>@Html.DisplayFor(model => model.IssueTypeName) </span>
            <br />
            <span class="glyphicon glyphicon-calendar"><label>@Resources.Resources.DateCreated_Label :</label>@Html.DisplayFor(model => model.DateCreated) </span>
            <br/>
            <label>@Resources.Resources.Status_Label :</label><span>@Html.DisplayFor(model => model.StatusName) </span>
            <br/>
            <label>@Resources.Resources.ProjectName_Label :</label><span>@Html.DisplayFor(model => model.ProjectName)</span>
            <br/>
            <label>@Resources.Resources.Priority_Label :</label><span>@Html.DisplayFor(model => model.PriorityName)</span>
            <br/>
          </div>
          <div class="tab-pane" id="activity">
            <div id="activityContent">
             
            </div>
          </div>
          <div class="tab-pane" id="commentsTab">
            <!-- comment box starts -->
            <div class="detailBox">
              <div class="titleBox">
                <label>@Resources.Resources.TaskComments_Title</label>
              </div>
              <div class="commentBox">


              </div>
              <div class="actionBox">
                @if (Model.TaskComments != null && Model.TaskComments.Count > 0)
      {
                  <ul class="commentList">
                    @foreach (var comment in Model.TaskComments)
        {
                      <li>
                        <div class="commentItem">
                          <div class="commenterImage">
                            <b>@comment.AuthorName</b> @Resources.Resources.AddedANote_Text <span class="date sub-text">@comment.DateCreated</span>
                          </div>
                          <br />
                          <div class="commentText">
                            <p>@comment.Content</p>
                          </div>
                        </div>
                      </li>


                    }
                  </ul>
                }
                <form class="form-inline" role="form">
                  @*<div class="form-group">
            <input class="form-control" type="text" placeholder="Your comments" />
          </div>*@
                  @using (Ajax.BeginForm("AddNewComment", "Task", new AjaxOptions
                  {
                    HttpMethod = "POST",
                    //OnSuccess = "addUserToRoleSuccess()",
                    // OnFailure = "addUserToRoleFailure()"

                  }))
                  {
                    @Html.HiddenFor(model => model.Id, new { htmlAttributes = new { @id = "projectId" } })


                    <div class="form-group">
                      <div class="col-md-10">
                        @Html.EditorFor(model => model.CurrentComment, new { htmlAttributes = new { @class = "form-control", rows = "5" } })
                        @Html.ValidationMessageFor(model => model.CurrentComment, "", new { @class = "text-danger" })
                      </div>
                    </div>

                    <div class="form-group">
                      <div>
                        <button class="btn btn-default" id="addNote" type="submit">@Resources.Resources.Add_Button</button>
                      </div>
                    </div>
                  }

                </form>
              </div>

            </div>
            <!-- comment box ends -->
          </div>
        </div>
      </div>
    </div>
  </div>
</div>


  <p>
    @Html.ActionLink(Resources.Resources.Edit_Link, "Edit", new {  taskId = Model.Id  }) |
    @Html.ActionLink(Resources.Resources.BackToList_Link, "Index")
  </p>

@section scripts
{
  <script type="text/javascript">
    $(document).ready(function () {

      $("#activityTab").click(function () {
        getActivityOnTask();
      });

      function getActivityOnTask() {
        debugger;
        $.ajax({
          url: "@getActivityOnTaskUrl",
          data: { taskId: "@taskId" },
          success: function (result) {
            document.getElementById('activityContent').innerHTML = PrepareInfo(result);
            document.getElementById('activityContent').style.display = "block";
          }
        });
      }

      function PrepareInfo(result) {
        var htmlText = '';

        if (result != null) {
          for (var i = 0; i < result.length; i++) {

            if (result[i] != null) {
              if (result[i].changeType == 0) {
                htmlText += '<p> '+' @Resources.Resources.User_Label' + ' <b> ' + result[i].changedByUsername + '</b> ' + '@Resources.Resources.ChangedStatusOnTask_Text' + '<b> ' + result[i].taskTitle + '</b> ' + '@Resources.Resources.ТоStatus_Text' + '<b> ' + MapStatus(result[0].changedToId) + '</b>  ' + result[i].changedOnString + '</p>';
              }
              else {
                htmlText += '<p> ' + '@Resources.Resources.User_Label' + ' <b> ' + result[i].changedByUsername + '</b> '+ '@Resources.Resources.ChangedAssigneeOnTask_Text' + '<b> ' + result[i].taskTitle + '</b> ' + '@Resources.Resources.ToAssignee_Text' + '<b> ' + MapAsignee(result[0].changedToId) + '</b>  ' + result[i].changedOnString + '</p>';
              }
            }

          }
        }

        return htmlText;
      }

      function MapStatus(statusId) {
        var statuses = @Html.Raw(statusesList);

        return "ToDo";
      }

      function MapAsignee(asigneeId) {
        return "bojanaborkovic@hotmail.com";
      }

      //add new comment
      $('#addNewNote').click(function () {
        var url = $('#newProjectCommentModal').data('url');

        $.get(url, function (data) {
          $('#newProjectCommentModal').html(data);

          $('#newProjectCommentModal').modal('show');
        });
      });

      $("#addNote").click(function (e) {
        e.preventDefault();
        AddNew();
      });

      function AddNew() {
        debugger;
        var modelObj = {};
        modelObj.Note = $("#CurrentComment").val();
        modelObj.ProjectId = $("#Id").val();

        // exucute ajax call to add new note
        $.ajax({
          type: "POST",
          url: '@urlNewProjectComment',
          data: JSON.stringify(modelObj),
          contentType: "application/json; charset=utf-8",
          dataType: "json",
          success: function (result) {
            location.reload();
          },
          error: function (result) {
            //alert('error');
          }
        });
      }

    });
  </script>
}
