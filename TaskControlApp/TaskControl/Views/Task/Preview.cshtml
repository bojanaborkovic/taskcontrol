@using TaskControl.ViewDataPreparers
@using TaskControlDTOs
@model TaskControl.Models.TaskViewModel

@{
  ViewBag.Title = "Preview";
  var getActivityOnTaskUrl = Url.Action("GetActivityOnTask", "Task");
  var taskId = Model.Id;
  var statusesList = new HtmlString(ViewBag.Statuses);
}



<div class="container">
  <div class="well">
    <div class="media">
      <div id="exTab3" class="container">
        <ul class="nav nav-pills">
          <li class="active">
            <a href="#Overview" data-toggle="tab">Overview</a>
          </li>
          <li>
            <a href="#activity" data-toggle="tab"  id="activityTab">Activity</a>
          </li>
          <li>
            <a href="#commentsTab" data-toggle="tab">Comments</a>
          </li>
        </ul>

        <div class="tab-content clearfix">
          <div class="tab-pane active" id="Overview">
           
            <br/>
            <i class="glyphicon glyphicon-calendar"></i><label>Due date:</label><span> @Html.DisplayFor(model => model.DueDate)</span>
            <br />
            <span class="glyphicon glyphicon-user"><label>Asignee:</label>@Html.DisplayFor(model => model.Asignee)</span>
            <br />
            <span class="glyphicon glyphicon-tag"></span><label>Issue Type:</label> <span>@Html.DisplayFor(model => model.IssueTypeName) </span>
            <br />
            <span class="glyphicon glyphicon-calendar"><label>Date Created:</label>@Html.DisplayFor(model => model.DateCreated) </span>
            <br/>
            <label>Status:</label><span>@Html.DisplayFor(model => model.StatusName) </span>
            <br/>
            <label>Project:</label><span>@Html.DisplayFor(model => model.ProjectName)</span>
            <br/>
            <label>Priority:</label><span>@Html.DisplayFor(model => model.PriorityName)</span>
            <br/>
          </div>
          <div class="tab-pane" id="activity">
            <div id="activityContent">
             
            </div>
          </div>
          <div class="tab-pane" id="commentsTab">
            <h3>We applied clearfix to the tab-content to rid of the gap between the tab and the content</h3>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>


  <p>
    @Html.ActionLink("Edit", "Edit", new { /* id = Model.PrimaryKey */ }) |
    @Html.ActionLink("Back to List", "Index")
  </p>

@section scripts
{
  <script type="text/javascript">
    $(document).ready(function () {

      $("#activityTab").click(function () {
        getActivityOnTask();
      });

      function getActivityOnTask() {
        debugger;
        $.ajax({
          url: "@getActivityOnTaskUrl",
          data: { taskId: "@taskId" },
          success: function (result) {
            document.getElementById('activityContent').innerHTML = PrepareInfo(result);
            document.getElementById('activityContent').style.display = "block";
          }
        });
      }

      function PrepareInfo(result) {
        var htmlText = '';

        if (result != null) {
          for (var i = 0; i < result.length; i++) {

            if (result[i] != null) {
              if (result[i].changeType == 0) {
                htmlText += '<p>User <b>' + result[i].changedByUsername + '</b>  changed status on task <b>' + result[i].taskTitle + '</b> to status:  <b>' + MapStatus(result[0].changedToId) + '</b> on ' + result[i].changedOnString + '</p>';
              }
              else {
                htmlText += '<p>User  <b>' + result[i].changedByUsername + '</b> changed asignee on task  <b>' + result[i].taskTitle + '</b> to asignee: <b>' + MapAsignee(result[0].changedToId) + '</b> on ' + result[i].changedOnString + '</p>';
              }
            }

          }
        }

        return htmlText;
      }

      function MapStatus(statusId) {
        var statuses = @Html.Raw(statusesList);

        return "ToDo";
      }

      function MapAsignee(asigneeId) {
        return "bojanaborkovic@hotmail.com";
      }

    });
  </script>
}
