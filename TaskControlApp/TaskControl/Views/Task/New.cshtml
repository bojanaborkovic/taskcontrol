@using TaskControl.ViewDataPreparers
@using TaskControlDTOs
@model TaskControl.Models.TaskViewModel

@{
	ViewBag.Title = "New";
	var issueTypes = ViewData[IssueTypePreparer.ViewDataKey] as List<IssueTypeEntity>;
	List<SelectListItem> issueTypesItems = issueTypes.ConvertAll(a =>
	{
		return new SelectListItem()
		{
			Text = a.Name,
			Value = a.Id.ToString(),
			Selected = false
		};
	});

	var statuses = ViewData[StatusPreparer.ViewDataKey] as List<StatusEntity>;
	List<SelectListItem> statusItems = statuses.ConvertAll(a =>
	{
		return new SelectListItem()
		{
			Text = a.Name,
			Value = a.Id.ToString(),
			Selected = false
		};
	});

	var priorities = ViewData[PriorityPreparer.ViewDataKey] as List<PriorityEntity>;
	List<SelectListItem> priorItems = priorities.ConvertAll(a =>
	{
		return new SelectListItem()
		{
			Text = a.Name,
			Value = a.Id.ToString(),
			Selected = false
		};
	});

}

<h2>New</h2>

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Task</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        

        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Asignee, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Asignee, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Asignee, "", new { @class = "text-danger" })
            </div>
        </div>

        

        <div class="form-group">
            @Html.LabelFor(model => model.IssueType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
							@Html.DropDownListFor(x => x.IssueType, issueTypesItems, "Select Issue Type", new { @class = "form-control" })
						</div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(x => x.IssueType, statusItems, "Select Status", new { @class = "form-control" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Reporter, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Reporter, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Reporter, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Priority, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
							@Html.DropDownListFor(x => x.IssueType, priorItems, "Select Priority", new { @class = "form-control" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Project, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Project, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Project, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group input-group-sm">
            @Html.LabelFor(model => model.DueDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
							@Html.TextBoxFor(model => model.DueDate, new { @class = "form-control datepicker", placeholder = "Enter due date here.." })
							@Html.ValidationMessageFor(model => model.DueDate)
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>


<script type="text/javascript">
	$(document).ready(function () { // will trigger when the document is ready
       $('.datepicker').datepicker(); //Initialise any date pickers
    });
</script>
