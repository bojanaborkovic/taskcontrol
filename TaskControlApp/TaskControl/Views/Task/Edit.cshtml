@using TaskControl.ViewDataPreparers
@using TaskControlDTOs
@model TaskControl.Models.TaskViewModel

@{
  ViewBag.Title = "Edit";
  var issueTypes = ViewData[IssueTypePreparer.ViewDataKey] as List<IssueTypeEntity>;
  List<SelectListItem> issueTypesItems = issueTypes.ConvertAll(a =>
  {
    return new SelectListItem()
    {
      Text = a.Name,
      Value = a.Id.ToString(),
      Selected = false
    };
  });

  var statuses = ViewData[StatusPreparer.ViewDataKey] as List<StatusEntity>;
  List<SelectListItem> statusItems = statuses.ConvertAll(a =>
  {
    return new SelectListItem()
    {
      Text = a.Name,
      Value = a.Id.ToString(),
      Selected = false
    };
  });

  var priorities = ViewData[PriorityPreparer.ViewDataKey] as List<PriorityEntity>;
  List<SelectListItem> priorItems = priorities.ConvertAll(a =>
  {
    return new SelectListItem()
    {
      Text = a.Name,
      Value = a.Id.ToString(),
      Selected = false
    };
  });

  var projectNames = ViewBag.ProjectNames;
  var userNames = ViewBag.UserNames;
}

<link href="http://code.jquery.com/ui/1.10.2/themes/smoothness/jquery-ui.css" rel="Stylesheet" />

<h2>Edit</h2>

@using (Html.BeginForm("Edit", "Task", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4></h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
           
            <div class="col-md-10">
                @Html.DisplayFor(model => model.Id)
                @Html.HiddenFor(model => model.Id)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

			<div class="form-group">
				@Html.LabelFor(model => model.Asignee, htmlAttributes: new { @class = "control-label col-md-2" })
				<div class="col-md-10">
					@*@Html.EditorFor(model => model.Asignee, new { htmlAttributes = new { @class = "form-control" } })*@

          @Html.EditorFor(m => m.Asignee, new { htmlAttributes = new { @class = "form-control autoasignee", @placeholder = "Enter username" } })

					@Html.ValidationMessageFor(model => model.Asignee, "", new { @class = "text-danger" })
				</div>
			</div>

        <div class="form-group">
            @Html.LabelFor(model => model.DateCreated, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
              @Html.DisplayFor(model => model.DateCreated)
           </div>
        </div>

			<div class="form-group">
				@Html.LabelFor(model => model.IssueType, htmlAttributes: new { @class = "control-label col-md-2" })
				<div class="col-md-10">
					@Html.DropDownListFor(x => x.IssueType, issueTypesItems, "Select Issue Type", new { @class = "form-control" })
				</div>
			</div>

			<div class="form-group">
				@Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-md-2" })
				<div class="col-md-10">
					@Html.DropDownListFor(x => x.Status, statusItems, "Select Status", new { @class = "form-control" })
				</div>
			</div>

			<div class="form-group">
				@Html.LabelFor(model => model.Reporter, htmlAttributes: new { @class = "control-label col-md-2" })
				<div class="col-md-10">
					@*@Html.EditorFor(model => model.Reporter, new { htmlAttributes = new { @class = "form-control" } })*@
					@Html.EditorFor(m => m.Reporter, new { htmlAttributes = new { @class = "form-control autoasignee", @placeholder = "Enter username" } })
					@Html.ValidationMessageFor(model => model.Reporter, "", new { @class = "text-danger" })
				</div>
			</div>

			<div class="form-group">
				@Html.LabelFor(model => model.Priority, htmlAttributes: new { @class = "control-label col-md-2" })
				<div class="col-md-10">
					@Html.DropDownListFor(x => x.Priority, priorItems, "Select Priority", new { @class = "form-control" })
				</div>
			</div>

        <div class="form-group">
            @Html.LabelFor(model => model.ProjectName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ProjectName, new { htmlAttributes = new { @class = "form-control autocomplete" }, @placeholder = "Enter project name" })
                @Html.ValidationMessageFor(model => model.ProjectName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DueDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
              @Html.TextBoxFor(model => model.DueDate, new { @class = "form-control datepicker", placeholder = "Enter due date here.." })
                @Html.ValidationMessageFor(model => model.DueDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<script type="text/javascript">
	$(document).ready(function () { // will trigger when the document is ready
		$('.datepicker').datepicker(); //Initialise any date pickers

		var availableTags = @Html.Raw(projectNames);

    var availableUsernames = @Html.Raw(userNames);

		$(".autocomplete").autocomplete({
			source: availableTags
		});

		$(".autoasignee").autocomplete({
		  source: availableUsernames
		});

    });
</script>