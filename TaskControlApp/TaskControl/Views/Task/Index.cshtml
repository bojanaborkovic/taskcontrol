@using TaskControl.Models
@using PagedList.Mvc;

@model  PagedList.IPagedList<TaskSearchViewModel>

@{
  ViewBag.Title = "Tasks";
  string currentFilter = ViewBag.CurrentFilter;
  string currentSort = ViewBag.CurrentSort;

  var indexUrl = Url.Action("Index", "Task");
  if (string.IsNullOrEmpty(currentSort))
  {
    currentSort = "Id_desc";
  }
}

<h2 class="text-primary">Tasks</h2>
<br />
<button class="btn btn-default btn-lg btn-success" type="button" onclick="location.href='@Url.Action("Create", "Task")'">
  Create new task
</button>
<br />
<br />
<p>
  Find by name: <input id="SearchString" name="SearchString" type="text" value="" />
  <input type="button" value="Search" id="btnSearch" />
</p>

<div id="projectFiltering">
  @Html.Partial("ProjectFilter", (ProjectFilterViewModel)ViewBag.OwnersProject)
</div>



<div id="TaskList">
  @Html.Partial("TaskList", Model)
</div>

@section scripts
{
  <script type="text/javascript">

    $(document).ready(function () {
      // Adding popstate event listener to handle browser back button
      window.addEventListener("popstate", function (e) {
        debugger;
        $.ajax({
          url: location.href,
          success: function (result) {
            $('#TaskList').html(result);
          }
        });
      });

      function ChangeUrl(page, url) {
        if (typeof (history.pushState) != "undefined") {
          var obj = { Page: page, Url: url };
          history.pushState(null, obj.Page, obj.Url);
        } else {
          alert("Browser does not support HTML5.");
        }
      }

      function getUrlVars() {
        var vars = [], hash;
        var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
        for (var i = 0; i < hashes.length; i++) {
          hash = hashes[i].split('=');
          vars.push(hash[0]);
          vars[hash[0]] = hash[1];
        }
        return vars;
      }

      function search() {
         debugger;
        $.ajax({
          url: "@indexUrl",
          data: { searchString: $("#SearchString").val() },
          success: function (result) {
            ChangeUrl("index", "/Task/Index?searchString=" + $("#SearchString").val());
            $('#TaskList').html(result);
          }
        });
      }

      $(function () {
        $("#btnSearch").click(function () {
          search();
        });

        $("#SearchString").keypress(function (e) {
          if (e.keyCode == 13) {
            search();
          }
        });
        $('body').on('click', '#TaskList .pagination a', function (event) {
          event.preventDefault();
          console.log('page');

          var searchString = $('#SearchString').val();
          if (searchString == undefined || searchString == '') {
            searchString = '';
          } else {
            searchString = '&searchString=' + searchString;
          }
          var url = $(this).attr('href') + searchString;
          console.log(url);
          $.ajax({
            url: url,
            success: function (result) {
              ChangeUrl('index', url);
              $('#TaskList').html(result);
            }
          });
        });


        $('body').on('click', '#TaskList .table a', function (event) {

          event.preventDefault();
          var link = $(this).text();

          if (link == "Edit" || link == "Details") {
            window.location = event.target.href;
          }
          else {

            var searchString = $('#SearchString').val();
            if (searchString == undefined || searchString == '') {
              searchString = '';
            } else {
              searchString = '&searchString=' + searchString;
            }

            var columnToSort = $(this).text();

            var currentSortOption = getUrlVars()['sortOption'];
            console.log(currentSortOption);
            var sort;

            switch (currentSortOption) {
              case "asignee_acs":
                sort = 'sortOption=asignee_desc';
                break;
              case "asignee_desc":
                sort = 'sortOption=asignee_acs';
                break;
              case "duedate_acs":
                sort = 'sortOption=duedate_desc';
                break;
              case "duedate_desc":
                sort = 'sortOption=duedate_acs';
                break;
              case "status_acs":
                sort = 'sortOption=status_desc';
                break;
              case "status_desc":
                sort = 'sortOption=status_acs';
                break;
              default:
                sort = '';
                break;
            }



            switch (columnToSort) {
              case 'Asignee':
                if (currentSortOption != 'asignee_acs' && currentSortOption != 'asignee_desc') {
                  sort = 'sortOption=asignee_acs';
                }
                break;
              case 'DueDate':
                if (currentSortOption != 'duedate_acs' && currentSortOption != 'duedate_desc') {
                  sort = 'sortOption=duedate_acs';
                }
                break;
              case 'Status':
                if (currentSortOption != 'status_acs' && currentSortOption != 'status_desc') {
                  sort = 'sortOption=status_desc';
                }
                break;
              default:
                sort = '';
                break;

            }
            if (sort != '' & searchString != '') {
              sort = '&' + sort;
            }

            var url = '/Task/Index?' + searchString + sort;

            $.ajax({
              url: url,
              success: function (result) {
                ChangeUrl('index', url);
                $('#TaskList').html(result);
              }
            });

          }

        }); //end of on click event (on table)

      });
    });

  </script>

}

