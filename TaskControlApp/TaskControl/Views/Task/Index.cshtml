@using TaskControl.Models
@using PagedList.Mvc;

@model PagedList.IPagedList<TaskSearchViewModel>

@{
  ViewBag.Title = "Tasks";
  string currentFilter = ViewBag.CurrentFilter;
  string currentSort = ViewBag.CurrentSort;
  if (string.IsNullOrEmpty(currentSort))
  {
    currentSort = "Id_desc";
  }
}

<h2 class="text-primary">Tasks</h2>
<br />
<button class="btn btn-default btn-lg btn-success" type="button" onclick="location.href='@Url.Action("Create", "Task")'">
  Create new task
</button>
<br />
<br />
<div class="input-group">
  @using (Html.BeginForm("Search", "Task", FormMethod.Get))
  {
    <form>
      <div class="form-group">

        @Html.Label("Find by name:", htmlAttributes: new { @class = "control-label" })
        <div class="col-md-10">
          @Html.TextBox("SearchString", ViewBag.CurrentFilter as string, new { @class = "form-control" })
          <br />

        </div>
        <div class="col-md-offset-10">
          <input type="submit" value="Search" class="btn btn-primary btn-lg" id="searchUsers" />
        </div>
      </div>


    </form>

  }
</div>
<br />
<br />
<table class="table table-striped col-md-6">
  <thead>
    <tr>
      <th>
        @Html.ActionLink("#", "Search", Request.QueryString.ToRouteValueDictionary("sortOrder", (string)ViewBag.IdSortParam))
        @Html.SortIdentifier(currentSort, "Id")
      </th>
      <th>Title</th>
      <th>Description</th>
      <th>IssueType</th>
      <th>Priority</th>
      <th>@Html.ActionLink("Status", "Search", Request.QueryString.ToRouteValueDictionary("sortOrder", (string)ViewBag.StatusSortParam))
        @Html.SortIdentifier(currentSort, "status")</th>
      <th>@Html.ActionLink("Asignee", "Search", Request.QueryString.ToRouteValueDictionary("sortOrder", (string)ViewBag.AsigneeSortParam))
      @Html.SortIdentifier(currentSort, "asignee")</th>
      <th>@Html.ActionLink("DueDate", "Search", Request.QueryString.ToRouteValueDictionary("sortOrder", (string)ViewBag.DueDateSortParam))
      @Html.SortIdentifier(currentSort, "duedate")</th>
    </tr>
  </thead>
  @foreach (var item in Model)
  {
    <tbody>
      <tr>
        <td>
          @Html.DisplayFor(modelItem => item.TaskId)
        </td>
        <td>
          @Html.DisplayFor(modelItem => item.Title)
        </td>
        <td>
          @Html.DisplayFor(modelItem => item.Description)
        </td>
        <td>
          @Html.DisplayFor(modelItem => item.IssueType)
        </td>
        <td>
          @Html.DisplayFor(modelItem => item.Priority)
        </td>
        <td>
          @Html.DisplayFor(modelItem => item.Status)
        </td>
        <td>
          @Html.DisplayFor(modelItem => item.Asignee)
        </td>
        <td>
          @Html.DisplayFor(modelItem => item.DueDate)
        </td>
        <td>
          <b>@Html.ActionLink("Edit", "Edit", new { taskId = item.TaskId })</b>
        </td>
      </tr>
    </tbody>
  }
</table>

<div class="pager">
  @Html.PagedListPager(Model, pageNumber => Url.Action("Search", new
{
  pageNumber,
  sortOrder = ViewBag.currentSort,
  currentFilter = ViewBag.CurrentFilter
}))
  Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
</div>